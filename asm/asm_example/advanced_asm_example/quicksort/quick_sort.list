 line   address	contents
   16  00000000          	.text
   21  00000000          	main:
   23  00000000  201e0138	addi r30, r0, stack 	# set stack pointer to base of stack
   25  00000004  8c010134	lw r1, array_0(r0)		# set left pointer to array elements
   26  00000008  8c020130	lw r2, array_N(r0)		# set right pointer to array elements
   28  0000000c  0c000004	jal qsort				# sort array using quick sort
   30  00000010          	endless: 
   31  00000010  0bfffffc	j endless				# wait forever
   36  00000014          	qsort:	
   40  00000014  0022e82d	sge r29, r1, r2		# if left limit is greater or equal to right limit
   41  00000018  17a0008c	bnez r29, return	# jump to end of routine and return back
   45  0000001c  afdf0000	sw (r30), r31		# push return address
   46  00000020  23de0004	addi r30, r30, 4
   48  00000024  afc20000	sw (r30), r2		# push right limit
   49  00000028  23de0004	addi r30, r30, 4
   51  0000002c  afc70000	sw (r30), r7		# push previous saved value of right limit
   52  00000030  23de0004	addi r30, r30, 4
   57  00000034  20260000	addi r6, r1, 0
   58  00000038  20470000	addi r7, r2, 0
   62  0000003c  8c230000	lw r3, (r1)			# leftmost element of current range is the pivot
   69  00000040  28210004	subi r1, r1, 4		# left limit is decresed by one position
   70  00000044  20420004	addi r2, r2, 4		# right limit is increased by one position
   73  00000048          	loop1:	
   74  00000048  28420004	subi r2, r2, 4		# decrease right limit by one position
   75  0000004c  8c450000	lw r5, (r2)			# load in r5 element pointed by right limit
   76  00000050  00a3e82b	sgt r29, r5, r3		# if current element is greater than pivot
   77  00000054  17a0fff0	bnez r29, loop1		# jump back to find another element
   80  00000058          	loop2:	
   81  00000058  20210004	addi r1, r1, 4		# increase left limits by one position
   82  0000005c  8c240000	lw r4, (r1)			# load in r4 element pointed by left limit
   83  00000060  0083e82a	slt r29, r4, r3		# if current element is less than pivot
   84  00000064  17a0fff0	bnez r29, loop2		# jump back to find another element
   86  00000068  0022e82d	sge r29, r1, r2		# if left limit is equal or greater than right one
   87  0000006c  17a0000c	bnez r29, recur		# jump to recursive calls
   91  00000070  ac250000	sw (r1), r5			# store in left limit position last right-side element
   92  00000074  ac440000	sw (r2), r4			# store in right limit position last left-side element
   94  00000078  0bffffcc	j loop1				# jump back to continue partitioning
   97  0000007c          	recur:
  101  0000007c  20c10000	addi r1, r6, 0		# new left limit is equal to original one
  102  00000080  0fffff90	jal qsort			# call quick sort with new array bounds
  106  00000084  20410004	addi r1, r2, 4		# new left limit is one position after right pointer
  107  00000088  20e20000	addi r2, r7, 0		# new right limit is equal to original one
  108  0000008c  0fffff84	jal qsort			# call quick sort with new array bounds
  113  00000090  2bde0004	subi r30, r30, 4	# pop previous saved value of right limit
  114  00000094  8fc70000	lw r7, (r30)
  116  00000098  2bde0004	subi r30, r30, 4	# pop right limit
  117  0000009c  8fc20000	lw r2, (r30)
  119  000000a0  2bde0004	subi r30, r30, 4	# pop return address
  120  000000a4  8fdf0000	lw r31, (r30)
  122  000000a8          	return:
  123  000000a8  4be00000	jr r31				# return to calling routine
  150  000000ac          	.data
  152  00000000          	code_space:
  153  00000000          	.space 256
  169  00000100          	array:
  170  00000100  00000005	.word 5,18,-12,24,17,1,7,3,-8,20,100,-33
  170  00000104  00000012	
  170  00000108  fffffff4	
  170  0000010c  00000018	
  170  00000110  00000011	
  170  00000114  00000001	
  170  00000118  00000007	
  170  0000011c  00000003	
  170  00000120  fffffff8	
  170  00000124  00000014	
  170  00000128  00000064	
  170  0000012c  ffffffdf	
  174  00000130          	array_N:
  175  00000130  0000012c	.word array_N-4
  176  00000134          	array_0:
  177  00000134  00000100	.word array
  184  00000138          	stack:
  185  00000138          	.space 4096	# stack able to store 1024 elements should be enough
